{"language":"Solidity","sources":{"contracts/nordek-production/router/interfaces/IERC20.sol":{"content":"pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n"},"contracts/nordek-production/router/interfaces/INordekV2Factory.sol":{"content":"pragma solidity >=0.6.2;\r\n\r\ninterface INordekV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function feeReceiver() external view returns (address);\r\n    function setFeeReceiver(address _feeReceiver) external;\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n\r\n    function swapLimitBP() external view returns (uint256);\r\n    function setSwapLimitBP(uint256 value) external;\r\n\r\n    function swapFeeBP() external view returns (uint256);\r\n    function setSwapFeeBP(uint256 value) external;\r\n\r\n    function addLiquidityFeeBP() external view returns (uint256);\r\n    function setAddLiquidityFeeBP(uint256 value) external;\r\n\r\n    function removeLiquidityFeeBP() external view returns (uint256);\r\n    function setRemoveLiquidityFeeBP(uint256 value) external;\r\n}\r\n"},"contracts/nordek-production/router/interfaces/INordekV2Pair.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface INordekV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(\n        address owner,\n        address spender,\n        uint value,\n        uint deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(\n        address indexed sender,\n        uint amount0,\n        uint amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves()\n        external\n        view\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(\n        uint amount0Out,\n        uint amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"contracts/nordek-production/router/interfaces/INordekV2Router01.sol":{"content":"pragma solidity >=0.6.2;\r\n\r\ninterface INordekV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) external pure returns (uint amountB);\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountOut);\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountIn);\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n"},"contracts/nordek-production/router/interfaces/INordekV2Router02.sol":{"content":"pragma solidity >=0.6.2;\r\n\r\nimport './INordekV2Router01.sol';\r\n\r\ninterface INordekV2Router02 is INordekV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n"},"contracts/nordek-production/router/interfaces/IWETH.sol":{"content":"pragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n"},"contracts/nordek-production/router/libraries/NordekRouterV2Library.sol":{"content":"pragma solidity >=0.6.6;\r\n\r\nimport '.././interfaces/INordekV2Pair.sol';\r\n\r\nimport './SafeMath.sol';\r\n\r\nlibrary NordekRouterV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'NordekV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), 'NordekV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB,\r\n        bytes memory initCode\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex'ff',\r\n                        factory,\r\n                        keccak256(abi.encodePacked(token0, token1)),\r\n                        initCode\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB,\r\n        bytes memory initCode\r\n    ) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1, ) = INordekV2Pair(\r\n            pairFor(factory, tokenA, tokenB, initCode)\r\n        ).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'NordekV2Library: INSUFFICIENT_AMOUNT');\r\n        require(\r\n            reserveA > 0 && reserveB > 0,\r\n            'NordekV2Library: INSUFFICIENT_LIQUIDITY'\r\n        );\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut,\r\n        uint fee\r\n    ) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'NordekV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            'NordekV2Library: INSUFFICIENT_LIQUIDITY'\r\n        );\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut =\r\n            numerator /\r\n            denominator -\r\n            ((numerator / denominator) * fee) /\r\n            10000;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut,\r\n        uint fee\r\n    ) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'NordekV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            'NordekV2Library: INSUFFICIENT_LIQUIDITY'\r\n        );\r\n        uint adjustedAmountOut = (amountOut * 10000) / (10000 - fee);\r\n\r\n        uint numerator = reserveIn.mul(adjustedAmountOut).mul(1000);\r\n        uint denominator = (reserveOut.sub(adjustedAmountOut)).mul(997);\r\n\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(\r\n        address factory,\r\n        uint amountIn,\r\n        uint fee,\r\n        address[] memory path,\r\n        bytes memory initCode\r\n    ) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'NordekV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(\r\n                factory,\r\n                path[i],\r\n                path[i + 1],\r\n                initCode\r\n            );\r\n            amounts[i + 1] = getAmountOut(\r\n                amounts[i],\r\n                reserveIn,\r\n                reserveOut,\r\n                fee\r\n            );\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        uint amountOut,\r\n        uint fee,\r\n        address[] memory path,\r\n        bytes memory initCode\r\n    ) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'NordekV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(\r\n                factory,\r\n                path[i - 1],\r\n                path[i],\r\n                initCode\r\n            );\r\n            amounts[i - 1] = getAmountIn(\r\n                amounts[i],\r\n                reserveIn,\r\n                reserveOut,\r\n                fee\r\n            );\r\n        }\r\n    }\r\n}\r\n"},"contracts/nordek-production/router/libraries/SafeMath.sol":{"content":"pragma solidity =0.6.6;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n"},"contracts/nordek-production/router/libraries/TransferHelper.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"},"contracts/nordek-production/router/SwapRouterV2.sol":{"content":"pragma solidity =0.6.6;\r\n\r\nimport './libraries/TransferHelper.sol';\r\n\r\nimport './interfaces/INordekV2Router02.sol';\r\nimport './libraries/NordekRouterV2Library.sol';\r\nimport './libraries/SafeMath.sol';\r\nimport './interfaces/IERC20.sol';\r\nimport './interfaces/IWETH.sol';\r\nimport './interfaces/INordekV2Factory.sol';\r\n\r\ncontract NordekRouterV2 {\r\n    using SafeMath for uint;\r\n\r\n    address public immutable factory;\r\n    address public immutable WETH;\r\n\r\n    bytes constant MAIN_PAIR_INIT_CODE =\r\n        hex'46dcc01628f53188fb69c0961e8f575bcab869dca658df1bd2be9bf2b1dfca25';\r\n\r\n    modifier ensure(uint deadline) {\r\n        require(deadline >= block.timestamp, 'NordekV2Router: EXPIRED');\r\n        _;\r\n    }\r\n\r\n    constructor(address _factory, address _WETH) public {\r\n        factory = _factory;\r\n        WETH = _WETH;\r\n    }\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\r\n    }\r\n\r\n    // **** ADD LIQUIDITY ****\r\n    function _addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin\r\n    ) internal returns (uint amountA, uint amountB) {\r\n        // create the pair if it doesn't exist yet\r\n        if (INordekV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {\r\n            INordekV2Factory(factory).createPair(tokenA, tokenB);\r\n        }\r\n        (uint reserveA, uint reserveB) = NordekRouterV2Library.getReserves(\r\n            factory,\r\n            tokenA,\r\n            tokenB,\r\n            MAIN_PAIR_INIT_CODE\r\n        );\r\n        if (reserveA == 0 && reserveB == 0) {\r\n            (amountA, amountB) = (amountADesired, amountBDesired);\r\n        } else {\r\n            uint amountBOptimal = NordekRouterV2Library.quote(\r\n                amountADesired,\r\n                reserveA,\r\n                reserveB\r\n            );\r\n            if (amountBOptimal <= amountBDesired) {\r\n                require(\r\n                    amountBOptimal >= amountBMin,\r\n                    'NordekV2Router: INSUFFICIENT_B_AMOUNT'\r\n                );\r\n                (amountA, amountB) = (amountADesired, amountBOptimal);\r\n            } else {\r\n                uint amountAOptimal = NordekRouterV2Library.quote(\r\n                    amountBDesired,\r\n                    reserveB,\r\n                    reserveA\r\n                );\r\n                assert(amountAOptimal <= amountADesired);\r\n                require(\r\n                    amountAOptimal >= amountAMin,\r\n                    'NordekV2Router: INSUFFICIENT_A_AMOUNT'\r\n                );\r\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\r\n            }\r\n        }\r\n    }\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        ensure(deadline)\r\n        returns (uint amountA, uint amountB, uint liquidity)\r\n    {\r\n        (amountA, amountB) = _addLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            amountADesired,\r\n            amountBDesired,\r\n            amountAMin,\r\n            amountBMin\r\n        );\r\n        address pair = NordekRouterV2Library.pairFor(\r\n            factory,\r\n            tokenA,\r\n            tokenB,\r\n            MAIN_PAIR_INIT_CODE\r\n        );\r\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\r\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\r\n        liquidity = INordekV2Pair(pair).mint(to);\r\n    }\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        ensure(deadline)\r\n        returns (uint amountToken, uint amountETH, uint liquidity)\r\n    {\r\n        (amountToken, amountETH) = _addLiquidity(\r\n            token,\r\n            WETH,\r\n            amountTokenDesired,\r\n            msg.value,\r\n            amountTokenMin,\r\n            amountETHMin\r\n        );\r\n        address pair = NordekRouterV2Library.pairFor(\r\n            factory,\r\n            token,\r\n            WETH,\r\n            MAIN_PAIR_INIT_CODE\r\n        );\r\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\r\n        IWETH(WETH).deposit{value: amountETH}();\r\n        assert(IWETH(WETH).transfer(pair, amountETH));\r\n        liquidity = INordekV2Pair(pair).mint(to);\r\n        // refund dust eth, if any\r\n        if (msg.value > amountETH)\r\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\r\n    }\r\n\r\n    // **** REMOVE LIQUIDITY ****\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) public ensure(deadline) returns (uint amountA, uint amountB) {\r\n        address pair = NordekRouterV2Library.pairFor(\r\n            factory,\r\n            tokenA,\r\n            tokenB,\r\n            MAIN_PAIR_INIT_CODE\r\n        );\r\n        INordekV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\r\n        (uint amount0, uint amount1) = INordekV2Pair(pair).burn(to);\r\n        (address token0, ) = NordekRouterV2Library.sortTokens(tokenA, tokenB);\r\n        (amountA, amountB) = tokenA == token0\r\n            ? (amount0, amount1)\r\n            : (amount1, amount0);\r\n        require(amountA >= amountAMin, 'NordekV2Router: INSUFFICIENT_A_AMOUNT');\r\n        require(amountB >= amountBMin, 'NordekV2Router: INSUFFICIENT_B_AMOUNT');\r\n    }\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) public ensure(deadline) returns (uint amountToken, uint amountETH) {\r\n        (amountToken, amountETH) = removeLiquidity(\r\n            token,\r\n            WETH,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountETHMin,\r\n            address(this),\r\n            deadline\r\n        );\r\n        TransferHelper.safeTransfer(token, to, amountToken);\r\n        IWETH(WETH).withdraw(amountETH);\r\n        TransferHelper.safeTransferETH(to, amountETH);\r\n    }\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountA, uint amountB) {\r\n        address pair = NordekRouterV2Library.pairFor(\r\n            factory,\r\n            tokenA,\r\n            tokenB,\r\n            MAIN_PAIR_INIT_CODE\r\n        );\r\n        uint value = approveMax ? uint(-1) : liquidity;\r\n        INordekV2Pair(pair).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        (amountA, amountB) = removeLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            liquidity,\r\n            amountAMin,\r\n            amountBMin,\r\n            to,\r\n            deadline\r\n        );\r\n    }\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH) {\r\n        address pair = NordekRouterV2Library.pairFor(\r\n            factory,\r\n            token,\r\n            WETH,\r\n            MAIN_PAIR_INIT_CODE\r\n        );\r\n        uint value = approveMax ? uint(-1) : liquidity;\r\n        INordekV2Pair(pair).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        (amountToken, amountETH) = removeLiquidityETH(\r\n            token,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountETHMin,\r\n            to,\r\n            deadline\r\n        );\r\n    }\r\n\r\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) public ensure(deadline) returns (uint amountETH) {\r\n        (, amountETH) = removeLiquidity(\r\n            token,\r\n            WETH,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountETHMin,\r\n            address(this),\r\n            deadline\r\n        );\r\n        TransferHelper.safeTransfer(\r\n            token,\r\n            to,\r\n            IERC20(token).balanceOf(address(this))\r\n        );\r\n        IWETH(WETH).withdraw(amountETH);\r\n        TransferHelper.safeTransferETH(to, amountETH);\r\n    }\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountETH) {\r\n        address pair = NordekRouterV2Library.pairFor(\r\n            factory,\r\n            token,\r\n            WETH,\r\n            MAIN_PAIR_INIT_CODE\r\n        );\r\n        uint value = approveMax ? uint(-1) : liquidity;\r\n        INordekV2Pair(pair).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            token,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountETHMin,\r\n            to,\r\n            deadline\r\n        );\r\n    }\r\n\r\n    // **** SWAP ****\r\n    // requires the initial amount to have already been sent to the first pair\r\n    function _swap(\r\n        uint[] memory amounts,\r\n        address[] memory path,\r\n        address _to\r\n    ) internal {\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0, ) = NordekRouterV2Library.sortTokens(\r\n                input,\r\n                output\r\n            );\r\n            uint amountOut = amounts[i + 1];\r\n            (uint amount0Out, uint amount1Out) = input == token0\r\n                ? (uint(0), amountOut)\r\n                : (amountOut, uint(0));\r\n            address to = i < path.length - 2\r\n                ? NordekRouterV2Library.pairFor(\r\n                    factory,\r\n                    output,\r\n                    path[i + 2],\r\n                    MAIN_PAIR_INIT_CODE\r\n                )\r\n                : _to;\r\n            INordekV2Pair(\r\n                NordekRouterV2Library.pairFor(\r\n                    factory,\r\n                    input,\r\n                    output,\r\n                    MAIN_PAIR_INIT_CODE\r\n                )\r\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\r\n        }\r\n    }\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external ensure(deadline) returns (uint[] memory amounts) {\r\n        amounts = NordekRouterV2Library.getAmountsOut(\r\n            factory,\r\n            amountIn,\r\n            INordekV2Factory(factory).swapFeeBP(),\r\n            path,\r\n            MAIN_PAIR_INIT_CODE\r\n        );\r\n        require(\r\n            amounts[amounts.length - 1] >= amountOutMin,\r\n            'NordekV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\r\n        );\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            NordekRouterV2Library.pairFor(\r\n                factory,\r\n                path[0],\r\n                path[1],\r\n                MAIN_PAIR_INIT_CODE\r\n            ),\r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external ensure(deadline) returns (uint[] memory amounts) {\r\n        amounts = NordekRouterV2Library.getAmountsIn(\r\n            factory,\r\n            amountOut,\r\n            INordekV2Factory(factory).swapFeeBP(),\r\n            path,\r\n            MAIN_PAIR_INIT_CODE\r\n        );\r\n        require(\r\n            amounts[0] <= amountInMax,\r\n            'NordekV2Router: EXCESSIVE_INPUT_AMOUNT'\r\n        );\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            NordekRouterV2Library.pairFor(\r\n                factory,\r\n                path[0],\r\n                path[1],\r\n                MAIN_PAIR_INIT_CODE\r\n            ),\r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable ensure(deadline) returns (uint[] memory amounts) {\r\n        require(path[0] == WETH, 'NordekV2Router: INVALID_PATH');\r\n        amounts = NordekRouterV2Library.getAmountsOut(\r\n            factory,\r\n            msg.value,\r\n            INordekV2Factory(factory).swapFeeBP(),\r\n            path,\r\n            MAIN_PAIR_INIT_CODE\r\n        );\r\n        require(\r\n            amounts[amounts.length - 1] >= amountOutMin,\r\n            'NordekV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\r\n        );\r\n        IWETH(WETH).deposit{value: amounts[0]}();\r\n        assert(\r\n            IWETH(WETH).transfer(\r\n                NordekRouterV2Library.pairFor(\r\n                    factory,\r\n                    path[0],\r\n                    path[1],\r\n                    MAIN_PAIR_INIT_CODE\r\n                ),\r\n                amounts[0]\r\n            )\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external ensure(deadline) returns (uint[] memory amounts) {\r\n        require(path[path.length - 1] == WETH, 'NordekV2Router: INVALID_PATH');\r\n        amounts = NordekRouterV2Library.getAmountsIn(\r\n            factory,\r\n            amountOut,\r\n            INordekV2Factory(factory).swapFeeBP(),\r\n            path,\r\n            MAIN_PAIR_INIT_CODE\r\n        );\r\n        require(\r\n            amounts[0] <= amountInMax,\r\n            'NordekV2Router: EXCESSIVE_INPUT_AMOUNT'\r\n        );\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            NordekRouterV2Library.pairFor(\r\n                factory,\r\n                path[0],\r\n                path[1],\r\n                MAIN_PAIR_INIT_CODE\r\n            ),\r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, address(this));\r\n        uint256 withdrawAmount = amounts[amounts.length - 1] -\r\n            (amounts[amounts.length - 1] *\r\n                INordekV2Factory(factory).swapFeeBP()) /\r\n            10000;\r\n        IWETH(WETH).withdraw(withdrawAmount);\r\n        TransferHelper.safeTransferETH(to, withdrawAmount);\r\n    }\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external ensure(deadline) returns (uint[] memory amounts) {\r\n        require(path[path.length - 1] == WETH, 'NordekV2Router: INVALID_PATH');\r\n        amounts = NordekRouterV2Library.getAmountsOut(\r\n            factory,\r\n            amountIn,\r\n            INordekV2Factory(factory).swapFeeBP(),\r\n            path,\r\n            MAIN_PAIR_INIT_CODE\r\n        );\r\n        require(\r\n            amounts[amounts.length - 1] >= amountOutMin,\r\n            'NordekV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\r\n        );\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            NordekRouterV2Library.pairFor(\r\n                factory,\r\n                path[0],\r\n                path[1],\r\n                MAIN_PAIR_INIT_CODE\r\n            ),\r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, address(this));\r\n        uint256 withdrawAmount = amounts[amounts.length - 1] -\r\n            (amounts[amounts.length - 1] *\r\n                INordekV2Factory(factory).swapFeeBP()) /\r\n            10000;\r\n        IWETH(WETH).withdraw(withdrawAmount);\r\n        TransferHelper.safeTransferETH(to, withdrawAmount);\r\n    }\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable ensure(deadline) returns (uint[] memory amounts) {\r\n        require(path[0] == WETH, 'NordekV2Router: INVALID_PATH');\r\n        amounts = NordekRouterV2Library.getAmountsIn(\r\n            factory,\r\n            amountOut,\r\n            INordekV2Factory(factory).swapFeeBP(),\r\n            path,\r\n            MAIN_PAIR_INIT_CODE\r\n        );\r\n        require(\r\n            amounts[0] <= msg.value,\r\n            'NordekV2Router: EXCESSIVE_INPUT_AMOUNT'\r\n        );\r\n        IWETH(WETH).deposit{value: amounts[0]}();\r\n        assert(\r\n            IWETH(WETH).transfer(\r\n                NordekRouterV2Library.pairFor(\r\n                    factory,\r\n                    path[0],\r\n                    path[1],\r\n                    MAIN_PAIR_INIT_CODE\r\n                ),\r\n                amounts[0]\r\n            )\r\n        );\r\n        _swap(amounts, path, to);\r\n        // refund dust eth, if any\r\n        if (msg.value > amounts[0])\r\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\r\n    }\r\n\r\n    // **** SWAP (supporting fee-on-transfer tokens) ****\r\n    // requires the initial amount to have already been sent to the first pair\r\n    function _swapSupportingFeeOnTransferTokens(\r\n        address[] memory path,\r\n        address _to\r\n    ) internal {\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0, ) = NordekRouterV2Library.sortTokens(\r\n                input,\r\n                output\r\n            );\r\n            INordekV2Pair pair = INordekV2Pair(\r\n                NordekRouterV2Library.pairFor(\r\n                    factory,\r\n                    input,\r\n                    output,\r\n                    MAIN_PAIR_INIT_CODE\r\n                )\r\n            );\r\n            uint amountInput;\r\n            uint amountOutput;\r\n            {\r\n                // scope to avoid stack too deep errors\r\n                (uint reserve0, uint reserve1, ) = pair.getReserves();\r\n                (uint reserveInput, uint reserveOutput) = input == token0\r\n                    ? (reserve0, reserve1)\r\n                    : (reserve1, reserve0);\r\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(\r\n                    reserveInput\r\n                );\r\n                amountOutput = NordekRouterV2Library.getAmountOut(\r\n                    amountInput,\r\n                    reserveInput,\r\n                    reserveOutput,\r\n                    INordekV2Factory(factory).swapFeeBP()\r\n                );\r\n            }\r\n            (uint amount0Out, uint amount1Out) = input == token0\r\n                ? (uint(0), amountOutput)\r\n                : (amountOutput, uint(0));\r\n            address to = i < path.length - 2\r\n                ? NordekRouterV2Library.pairFor(\r\n                    factory,\r\n                    output,\r\n                    path[i + 2],\r\n                    MAIN_PAIR_INIT_CODE\r\n                )\r\n                : _to;\r\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\r\n        }\r\n    }\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external ensure(deadline) {\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            NordekRouterV2Library.pairFor(\r\n                factory,\r\n                path[0],\r\n                path[1],\r\n                MAIN_PAIR_INIT_CODE\r\n            ),\r\n            amountIn\r\n        );\r\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\r\n        _swapSupportingFeeOnTransferTokens(path, to);\r\n        require(\r\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >=\r\n                amountOutMin,\r\n            'NordekV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\r\n        );\r\n    }\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable ensure(deadline) {\r\n        require(path[0] == WETH, 'NordekV2Router: INVALID_PATH');\r\n        uint amountIn = msg.value;\r\n        IWETH(WETH).deposit{value: amountIn}();\r\n        assert(\r\n            IWETH(WETH).transfer(\r\n                NordekRouterV2Library.pairFor(\r\n                    factory,\r\n                    path[0],\r\n                    path[1],\r\n                    MAIN_PAIR_INIT_CODE\r\n                ),\r\n                amountIn\r\n            )\r\n        );\r\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\r\n        _swapSupportingFeeOnTransferTokens(path, to);\r\n        require(\r\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >=\r\n                amountOutMin,\r\n            'NordekV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\r\n        );\r\n    }\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external ensure(deadline) {\r\n        require(path[path.length - 1] == WETH, 'NordekV2Router: INVALID_PATH');\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            NordekRouterV2Library.pairFor(\r\n                factory,\r\n                path[0],\r\n                path[1],\r\n                MAIN_PAIR_INIT_CODE\r\n            ),\r\n            amountIn\r\n        );\r\n        _swapSupportingFeeOnTransferTokens(path, address(this));\r\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\r\n        require(\r\n            amountOut >= amountOutMin,\r\n            'NordekV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\r\n        );\r\n        IWETH(WETH).withdraw(amountOut);\r\n        TransferHelper.safeTransferETH(to, amountOut);\r\n    }\r\n}\r\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}}